<!doctype s-function-doc system "s-function-doc.dtd" [
<!entity % S-OLD "INCLUDE">
]
>
<s-function-doc>
<s-topics>
   <s-topic>pyears</s-topic>
</s-topics>
<s-title>
Person Years 
</s-title>
<s-description>
This function computes the person-years of follow-up time contributed by a 
cohort of subjects, stratified into subgroups. 
It also computes the number of subjects who contribute to each cell of the 
output table, and optionally the number of events and/or expected number of 
events in each cell. 
</s-description>
<s-usage>
<s-old-style-usage>
pyears(formula, data, weights, subset, na.action,  
       ratetable=survexp.us, scale=365.25, expect=<s-expression>event</s-expression>, 
       model=F, x=F, y=F) 
</s-old-style-usage>
</s-usage>
<s-args-required>
<s-arg name="formula">
a formula object. 
The response variable will be a vector of follow-up times 
for each subject, or a <s-expression>Surv</s-expression> object containing the survival time and an 
event indicator. 
The predictors consist of optional grouping variables 
separated by + operators (exactly as in <s-expression>survfit</s-expression>), time-dependent grouping 
variables such as age (specified with <s-expression>tcut</s-expression>), and optionally a 
<s-expression>ratetable</s-expression> term. 
This latter matches each subject to his/her expected cohort. 
</s-arg>
</s-args-required>
<s-args-optional>
<s-arg name="data">
a data frame in which to interpret the variables named in 
the <s-expression>formula</s-expression>, or in the <s-expression>subset</s-expression> and the <s-expression>weights</s-expression> argument. 
</s-arg>
<s-arg name="weights">
case weights. 
</s-arg>
<s-arg name="subset">
expression saying that only a subset of the rows of the data 
should be used in the fit. 
</s-arg>
<s-arg name="na.action">
a missing-data filter function, applied to the model.frame, after any 
<s-expression>subset</s-expression> argument has been used.  Default is <s-expression>options()$na.action</s-expression>. 
</s-arg>
<s-arg name="ratetable">
a table of event rates, such as <s-expression>survexp.uswhite</s-expression>. 
</s-arg>
<s-arg name="scale">
a scaling for the results.  As most rate tables are in units/day, the 
default value of 365.25 causes the output to be reported in years. 
</s-arg>
<s-arg name="expect">
a character string, if <s-expression>"event"</s-expression> then the output table includes 
the expected number of events. 
If <s-expression>"pyears"</s-expression> then the output table includes the expected number 
of person-years of observation. 
This is only valid with a rate table. 
</s-arg>
<s-arg name="model">
a logical value, if TRUE then the model frame is included as component 
<s-expression>model</s-expression> in the object returned by the function. 
</s-arg>
<s-arg name="x">
a logical value, if TRUE then the model matrix is returned as component 
<s-expression>x</s-expression> in the object returned by the function. 
</s-arg>
<s-arg name="y">
a logical value, if TRUE then the response is returned as component <s-expression>y</s-expression> 
in the object returned by the function. 
</s-arg>
</s-args-optional>
<s-value>
a list with components: 
<s-return-component name="pyears">
an array containing the person-years of exposure. (Or other units, depending 
on the rate-table and the scale). 
</s-return-component>
<s-return-component name="n">
an array containing the number of subjects who contribute time to each cell 
of the <s-expression>pyears</s-expression> array. 
</s-return-component>
<s-return-component name="event">
an array containing the observed number of events.  This will be present only 
if the response variable is a <s-expression>Surv</s-expression> object. 
</s-return-component>
<s-return-component name="expected">
an array containing the expected number of events (or person years if 
<s-expression>expect =</s-expression> <s-expression>"pyears"</s-expression>).  This will be present only if there was a 
<s-expression>ratetable</s-expression> term. 
</s-return-component>
<s-return-component name="offtable">
the number of person-years of exposure in the cohort that was not part of 
any cell in the <s-expression>pyears</s-expression> array.  This is often useful as an error check; if 
there is a mismatch of units between two variables, nearly all the person 
years may be off table. 
</s-return-component>
<s-return-component name="summary">
a summary of the rate-table matching. This is also useful as an error 
check. 
</s-return-component>
<s-return-component name="call">
an image of the call to the function. 
</s-return-component>
<s-return-component name="na.action">
the na.action attribute contributed by an <s-expression>na.action</s-expression> routine, if any. 
</s-return-component>
</s-value>
<s-details>
Because <s-expression>pyears</s-expression> may have several time variables, it is necessary that all 
of them be in the same units.  For instance, in the call 
<s-expression>
 py <- pyears(futime ~ rx + ratetable(age=age, sex=sex, year=entry.dt)) 
</s-expression>
with a ratetable whose natural unit is days, it is important that <s-expression>futime</s-expression>, 
<s-expression>age</s-expression> and <s-expression>entry.dt</s-expression> all be in days. 
Given the wide range of possible inputs, 
it is difficult for the routine to do sanity checks of this aspect. 
<br><br>
A special function <s-expression>tcut</s-expression> is needed to specify time-dependent cutpoints. 
For instance, assume that age is in years, and that the desired final 
arrays have as one of their margins the age groups 0-2, 2-10, 10-25, and 25+. 
A subject who enters the study at age 4 and remains under observation for 
10 years will contribute follow-up time to both the 2-10 and 10-25 
subsets.  If <s-expression>cut(age, c(0,2,10,25,100))</s-expression> were used in the formula, the 
subject would be classified according to his starting age only. 
The <s-expression>tcut</s-expression> function has the same arguments as <s-expression>cut</s-expression>, 
but produces a different output object which allows the <s-expression>pyears</s-expression> function 
to correctly track the subject. 
<br><br>
The results of <s-expression>pyears</s-expression> are normally used as input to further calculations. 
The <s-expression>print</s-expression> routine, therefore, is designed to give only a summary of the 
table. 
<br><br>
The example below is from a study of hip fracture rates from 1930 - 1990 
in Rochester, Minnesota.  Survival post hip fracture has increased over 
that time, but so has the survival of elderly subjects in the population 
at large.  A model of relative survival helps to clarify what has happened: 
Poisson regression is used, but replacing exposure time with expected 
exposure (for an age and sex matched control). 
Death rates change with age, of course, so the result is carved into 
1 year increments of time.  Males and females were done separately. 
</s-details>
<s-see>
<s-function name="ratetable.sgm">ratetable</s-function>,  <s-function name="survexp.sgm">survexp</s-function>,  <s-function name="Surv.sgm">Surv</s-function>.   </s-see>
<s-examples>
<s-example type = text>
# Example 1: 
attach(makehips) 
temp1 &lt;- tcut(dt.fracture, seq(from=julian(1,1,30), by=365.25, 
     length = 61) 
temp2 &lt;- tcut(age*365.5, 365.25*(0:105))  # max age was &gt; 100! 
pfit.m &lt;- pyears(Surv(futime, status) ~ temp1 + temp2 + 
     ratetable(age = age*365.25, year = dt.fracture, 
     sex=1), subset=(sex==1), ratetable = survexp.minnwhite) 
# now, convert the arrays into a data frame 
tdata &lt;- data.frame( age  = (0:105)[col(pfit.m$pyears)], 
                      yr  = (1930:1990)[row(pfit.m$pyears)], 
                       y  = c(pfit.m$event), 
                     time = c(pfit.m$expect)) 
# fit the gam model 
gfit.m &lt;- gam(y ~ s(age) + s(yr) + offset(log(time)),  
                        family = poisson, data = tdata) 
plot(gfit.m, se = T) 
# Example #2  Create the hearta data frame: 
hearta &lt;- by(heart, heart$id,  
             function(x)x[x$stop == man(x$stop),]) 
hearta &lt;- do.call("rbind", hearta) 
# Produce pyears table: 
pyears(stop/365.25 ~ tcut(age + 48, c(0,50,60,70,100)) + 
       surgery, data = hearta, scale = 1) 
</s-example>
</s-examples>
<s-keywords>
<s-keyword>survival4</s-keyword>
</s-keywords>
<s-docclass>
function
</s-docclass>
</s-function-doc>

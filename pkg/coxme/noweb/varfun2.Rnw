    
\subsection{coxmeMlist}
In a mixed-effects model the random effects $b$ are assumed to
follow a Gaussian distribution
$$
  b \sim N(0, \Sigma)
$$
In all the random effects modeling programs that I am aware of,
the user specifies the structure of $\Sigma$ and the program
constructs the actual matrix.  
For instance, `independent', `compound symmetry', or `autoregressive'.
This basic approach does not work for genetic studies, since the
correlation is based on family structure and cannot be inferred from
a simple keyword.
The [[coxmeMlist]] variance specification accepts a list of
fixed matrices $A_1$, $A_2$, ... and fits the variance
structure $\Sigma = \sigma_1^2 A_1 + \sigma_2^2 A_2 + \ldots$.
The individual matrices are often in a block-diagonal sparse 
representation due to size.
(The motivating study for this structure had 26050 subjects with a
random intercept per subject, so that $A$ was 26050 by 26050.)

The matrices must have dimnames that match the levels of the 
grouping variable.  Much of the initialization work is to verify
this, remove unneeded columns of the matrices (if for instance a
subject has been dropped due to missing values), and reorder the
grouping variable to match the resulting matrix. ( Sparse matrices
cannot be arbitrarily reordered, so whatever label is on row 1 of the
variance matrix needs to become the first level of the grouping
variable, the second row the second, etc, during the computations.)
For this reason I at present only allow terms of the form 
[[(1|g)]] or [[(x|1)]] ($x$ could be a matrix or list of variables,
$g$ could be nested), since I don't have a good scheme for naming  %'
the $b$ vector when there are both covariates and grouping.

Three checks on the matrices are commonly added.  
\begin{enumerate}
\item A solution with $A^*= A/2$ and $\sigma^* = \sigma \sqrt{2}$ is
of course equivalent to one with $A$ and $\sigma$.
For uniqueness, the matrices $A_1$, $A_2$ etc are rescaled to have a
diagonal of 1.  Kinship matrices in particular often have a diagonal of 1/2.
\item The individual $A$ matrices are checked to verify that each is
positive definite.  If they are not this is most often reflects an 
error in forming them.
With the extension of the package to more general Matrix objects this
parameter's default has been reset to FALSE, as it can cause a large amount
of confusion when it is applied to other cases, e.g., a smoothness penalty.
\item The parameters $\sigma$ are constrained to be $>0$.
\end{enumerate}
I have had analyses where each of these had to be relaxed.

<<coxmeMlist>>=
coxmeMlist <- function(varlist, rescale=FALSE, pdcheck=TRUE,  positive=TRUE) {
    # Because of environments, the init function will inherit the
    #  four variables below 
    varlist <- varlist
    rescale <- rescale
    pdcheck <- pdcheck
    if (!is.logical(positive)) stop("Invalid value for postive argument")
    positive <- positive
    <<coxmeMlist-init>>
    <<coxmeMlist-generate>>
    <<coxmeMlist-wrapup>>
    out <- list(initialize=initialize, generate=generate, wrapup=wrapup)
    class(out) <- 'coxmevar'
    out
    }
@ 

The [[initialize]] routine needs to match each row/column of the variance
matrix or matrices that have been given to the appropriate element of
the random coefficient $b$; this is done using the dimnames.
(The matrices must be square).
Most of the real work is done by [[bdsmatrix.reconcile]].  Given a list
of variance matrices and a list of target dimnames, it returns a list
where all the matrices have the same row/col order, the dimnames of
which will be the order of the coefficients $b$.  It also drops any
unused rows or cols from the matrices.
  
The [[bdsmatrix.reconcile]] routine expects dimnames on all the
matrices.  If none of the matrices are given a dimname, we add
them before calling the routine --- but only if they are exactly
the right dimension.  This allows a user to give an unnamed matrix
that is just exactly the right length.
<<coxmeMlist-init>>=
initialize <- function(vinit, fixed, intercept, G, X, sparse) {
    vardefault <- c(.02, .1, .4, .8)^2
    ngroup <- min(length(G), ncol(G))
    nvar   <- min(length(X), ncol(X))  # a NULL or a nx0 matrix yields 0
    if (ngroup >0 & nvar >0)
        return(list(error="Mlist cannot have both covariates and grouping"))

    if (!is.list(varlist)) varlist <- list(varlist)  # a naked matrix
    noname <- all(sapply(varlist, function(x) is.null(dimnames(x)) || 
                      (is.null(dimnames(x)[[1]]) & is.null(dimnames(x)[[2]]))))
    namefun <- function(x, names) {
        if (all(dim(x)== rep(length(names),2))) 
            dimnames(x) <- list(names, names)
        x
        }
    if (ngroup >0) {
        n <- nrow(G)
        G <- expand.nested(G)
        groups <- G[[ngroup]]  #drop all but the last
        bname <- levels(groups)
        if (noname) varlist <- lapply(varlist, namefun, bname)
        if (any(sapply(varlist, function(x) inherits(x, "Matrix"))))
            varlist <- lapply(varlist, function(x) as(x, "bdsmatrix"))
        tlist <- bdsmatrix.reconcile(varlist, bname)
        imap <- matrix(match(groups, dimnames(tlist[[1]])[[1]]))
        xmap <- NULL
        rname <- names(G)[[ngroup]]
        }
    else {
        n <- nrow(X)
        bname <- dimnames(X)[[2]]
        if (noname) varlist <- lapply(varlist, namefun, bname)
        tlist <- bdsmatrix.reconcile(varlist, bname)
        # sparse matrices (bdsmatrix or Matrix) are illegal, for now, 
        #   for covariates
        tlist <- lapply(tlist, as.matrix)
        xmap <- match(dimnames(X)[[2]], bname)
        xmap <- matrix(rep(xmap, n), nrow=n, byrow=T)
        imap <- NULL
        rname <- "(Shrink)"
        }

    <<Mlist-initial-value>>
    <<Mlist-matrix-checks>>

    # itheta is a list with vectors of initial values
    # theta is a vector, and only the fixed values need to be correct (the others
    #  are replaced by the parent routine).  All fixed "inits" are of length 1.
    theta <- sapply(itheta, function(x) x[1])    
    list(theta=itheta[!which.fixed], imap=imap, X=X, xmap=xmap,
         parms=list(varlist=tlist, theta=theta, fixed=which.fixed,
                    bname=bname, rname=rname, positive=positive,
                    vname=names(varlist)))
    }
@ 

Processing initial values is very simple: the number of coefficients is
equal to the number of matrices in the varlist.  
Names are ignored, zeros are treated as ``missing''.
In some genetics problems having all the variances equal leads to 
singularity, so we fudge the default initial values.
<<Mlist-initial-value>>=
ntheta <- length(varlist)
fudge <- seq(1, 1.5, length=ntheta)
itheta <- vector('list', ntheta)
for (i in 1:ntheta) itheta[[i]] <- vardefault * fudge[i]

if (length(vinit) >0) {
    if (length(vinit) != ntheta)
        return(list(error="Wrong length for initial values"))
    indx <- !is.na(vinit) & vinit !=0  #which to use
    if (any(indx)) itheta[indx] <- vinit[indx]
    }

which.fixed <- rep(FALSE, ntheta)
if (length(fixed) >0) {
    if (length(fixed) != ntheta)
        return(list(error="Wrong length for fixed values"))
    indx <- !is.na(fixed) & fixed !=0  #which to use
    if (any(indx)) {
        itheta[indx] <- fixed[indx]
        which.fixed[indx] <- TRUE
        }
    }

if (length(positive)==1) positive <- rep(positive, ntheta)
if (length(positive) != ntheta)
    return(list(error="Wrong length for positive parameter"))
if (any(unlist(itheta[positive]) <=0))
    return(list(error="Invalid initial value, must be positive"))        
itheta[positive] <- lapply(itheta[positive], log)    
@ 

Check the matrices for validity.  We use non-negative
definite (NND) rather than positive definite because identical twins generate
a NND kinship matrix.
<<Mlist-matrix-checks>>=
for (j in 1:ntheta) {
    kmat <- tlist[[j]]
    if (rescale) {
        temp <- diag(kmat)
        if (any(temp==0))
            return(list(error="Diagonal of a variance matrix is zero"))
        if (any(temp != temp[1])) 
            warning("Diagonal of variance matrix is not constant")
        if (max(temp) !=1) {
            kmat <- kmat/max(temp)
            tlist[[j]] <- kmat
            }
        }
    if (pdcheck) {
        temp <- gchol(kmat)
        if (any(diag(temp) < 0))
            return(list(error="A variance matrix is not non-negative definite"))
        }
    }
@ 

The generate function is a simple sum.
<<coxmeMlist-generate>>=
 generate <- function(newtheta, parms) {
     theta <- parms$theta
     theta[!parms$fixed] <- newtheta
     if (any(parms$positive)) theta[parms$positive] <- 
          exp(pmax(-36, pmin(36, theta[parms$positive])))

     varmat <- parms$varlist[[1]] * theta[1]
     if (length(theta) >1) {
         for (i in 2:length(theta)) {
             varmat <- varmat + theta[i]*parms$varlist[[i]]
             }
         }
     varmat
     }
@ 
Wrapup is also simple. The thetas are named Vmat.1, Vmat.2, etc; or using
the names found on the orginal varlist (if any).
<<coxmeMlist-wrapup>>= 
wrapup <- function(newtheta, b, parms) {
        theta <- parms$theta
        theta[!parms$fixed] <- newtheta
        theta[parms$positive] <- exp(theta[parms$positive])

        defaultname <- paste("Vmat", 1:length(theta), sep=".")
        vname <- parms$vname
        if (length(vname)==0) vname <- defaultname
        else if (any(vname=='')){
            indx <- which(vname=='')
            vname[indx] <- defaultname[indx]
            }
        names(theta) <- vname
        theta <- list(theta)
        names(theta) <- parms$rname
        
        names(b) <- parms$bname
        b <- list(b)
        names(b) <- parms$rname
        list(theta=theta, b=b)
        }
@ 

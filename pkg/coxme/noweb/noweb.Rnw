\documentclass{article}
\usepackage{noweb}
\usepackage[pdftex]{graphicx}
%\usepackage{times}
\addtolength{\textwidth}{1in}
\addtolength{\oddsidemargin}{-.5in}
\setlength{\evensidemargin}{\oddsidemargin}

\noweboptions{breakcode}
\title{A \emph{noweb} processor for R}
\author{Terry Therneau}

\begin{document}
\maketitle
\section{Introduction}
 The {\tt{}coxme} function for mixed effects analyses based on a Cox
proportional hazards model is one of the later additions to the
{\tt{}survival} library in S.
It is easily the most complex bit of code in the package from all points
of view: mathematical, algorithmic, and S code wise.
As such, it seems like a natural candidate for documentation and 
maintainance using the literal programming model.  
\begin{quotation}
Let us change or traditional attitude to the construction of programs.
Instead of imagining that our main task is to instruct a \emph{computer}
what to do, let us concentrate rather on explaining to \emph{humans}
what we want the computer to do.  (Donald E. Knuth, 1984).
\end{quotation}

The .Rnw files for the source code of \emph{coxme} are not suitable for
processing with Sweave; it's goal is to insert the results of R code %'
execution into 
a document, mine is to act as the repository and documentation for the
code itself.  These are completely different and need different tools.
Luckily, however, the noweb format of ESS (.Rnw or .Snw files) works 
perfectly for creating the source files needed for either goal.
To process the files I use the \emph{noweb} system of Ramsey.
The \emph{notangle} routine extracts R source files from the merged .nw
file, and the \emph{noweave} routine creates lovely pdf files via
latex.

One problem is that the noweb package will not be found on a typical user
machine.  To make the code more self contained, I have written a simple
noweb parser in R.  One still needs the \emph{noweb.sty} file of Latex
macros from the base noweb distribution, but is otherwise self contained.
This file itself is the source for the R noweb parser, with the
following files:
<<*>>=
<<nwread>>
<<nwparse>>
<<nwloop>>
<<nwkillamp>>
<<notangle>>
<<noweave>>
<<tab.to.blank>>
@ 

\section{Parsing}
The [[noweb]] package is based on unix pipelines.
The first step on all the pipelines is to read in a source file and
tag the sections.  In [[noweb]] this is done with the [[markup]] 
program, which adds a tag to the front of every input line to identify
it.
A noweb file consists of chunks: text chunks are signaled by a line with
@ as the first character followed by a newline or a space, and
code chunks by the [[<<identifier>>=]] string alone on a line, where
\emph{identifier} is the name of the code chunk.
The first line of the program is assumed to be a text chunk if not 
preceeded by an ampersand line.
We parse this into a simple S object, a list containing [[nwtext]] and
[[nwcode]] objects.  All tabs are turned into blanks to facilitate later
processing.

A text object that has words on the same line as the @ is treated differently
than one that does not, for breaking lines.  
Comments on the @ line don't count as a new text line,   %'
but were used by earlier versions of noweb to aid in cross-indexing.
I do not support this historical use --- such comments are tossed away.

Although the documentation states that a code chunk must be on its
own line, the noweb distribution that I have will try to interpret any set of
paired angle brackets on one line as a starter unless the starting pair
is preceded by an ampersand thus [[@<<]], in which case it strips off the
@.  
This has no effect on S code, but this program itself has to add an
ampersand to two grep patterns below in order for the noweb program to
create a correct [[noweb.R]] file.
I also have to recognize this usage so that my bootstrapped noweb.R can
correctly process this file.

The code first finds that start of all code chunks and text chunks and
creates a matrix [[temp]] whose first row is the starting line of the
chunk, and second is the type of chunk: 1=text and 2=code.
The endline variable contains the last line of each chunk.
It then walks through one chunk at a time.

For a text chunk, it decides if the very first line was a blank
line.  If not, then the output is a character vector containing
all the lines.  If it is, then the blank line is suppressed
from the character vector, but a [[blankline]] attribute is
added to remind us that it once was there.  This is used to
create the Latex output in such a way that the line numbers
in the .tex file exactly match those in the .Rnw file, while
not introducing extra paragraph breaks.
Code chunks have a name extracted and
the remainder is passed through the [[nwparse]] function.
The code chunk names are used as names for the components of
the [[noweb]] object.

Finally two checks are run: make sure that any code chunk that
is referenced has been defined somewhere, and that there are
not any loops.
<<nwread>>=
nwread <- function(file) {
    program <- tab.to.blank(readLines(file))
    codestart <- which(grepl("^ *@<<[^>]*>>=", program))
    textstart <- which(grepl("^@$|^@ ", program))
    program <- nwkillat(program)
    if (min(codestart, textstart) > 1) textstart <- c(1, textstart)
    
    temp <- rbind( c(codestart, textstart),
                   c(rep(2, length(codestart)), rep(1, length(textstart))))
    temp <- temp[,order(temp[1,])]
    endline <- c(temp[1,-1] -1, length(program))

    output <- vector("list", ncol(temp))  #number of chunks
    oname <- rep("", ncol(temp))
    for (i in 1:ncol(temp)) {
        if (temp[2,i]==1) { # text
            blankline <- sub("^@ *","", program[temp[1,i]])
            if (blankline=="" || substring(blankline,1,1)=="%") {
                # The line is blank
                if (temp[1,i]==endline[i])
                    text <- vector("character",0)  #Nothing there!
                else text <- program[(temp[1,i]+1):endline[i]]
                attr(text, "blankline") <- TRUE
                }
            else {
                text <- blankline
                if (temp[1,i] < endline[i])
                    text <- c(text, program[(temp[1,i]+1):endline[i]])
                attr(text, "blankline") <- FALSE
                }
            class(text) <- "nwtext"
            output[[i]] <- text
            }
        
        else {  #code
            cname <-  sub(">>=.*$", "", sub("<<", "", program[temp[1,i]]))
            if (temp[1,i] == endline[i]) code <- vector("character", 0)
            else code <- program[(temp[1,i]+1):endline[i]]
            oname[i] <- cname
            output[[i]] <- nwparse(code)
            }
        }
    
    names(output) <- oname

    for (i in which(oname!= "")) {  # all the code chunks
        if (any(is.na(match(output[[i]]$xref, oname)))) {
            indx <- which(is.na(match(output[[i]]$xref, oname)))
            stop(paste("Code referenced but not found:",
                       paste((output[[i]]$xref)[indx], collapse=", ")))
            }
        }
    
    temp <- nwloop(output)
    if (length(temp)) 
        stop(paste("Code structure has circular references: ",
                   paste(temp, collapse=" --> ")))

    class(output) <- "noweb"
    output
    }
@ 
The [[nwparse]] routine looks for references to other code within the
lines of a code chunk.  
These are sequences of the form [[<<identifier>>]].
The resulting structure has the lines, a list of line numbers that are
pointers to other code [[xindex]], the name of the other code chunk,
and the relative indentation.
<<nwparse>>=
nwparse <- function(lines) {
    # Look for references to other code
    indx <- which(grepl("@<<[^>]*>>", lines))
    if (length(indx)) {
        xref <- sub(">>.*$", "", sub("[ \t]*<<", "", lines[indx]))
        indent <- sub("<<.*", "", lines[indx])
        out <- list(lines=lines, xref=xref, indent=indent, xindex=indx)
        }
    else out <- list(lines=lines, xref=NULL)
    
    class(out) <- "nwcode"
    out
    }
@ 
                
The code will fail when expanding a structure with a closed loop of
references.  This finds such loops.  The return value gives the shortest
loop found.
I only report one because the same loop will appear multiple times, once for
each starting point that can enter it.
<<nwloop>>=
nwloop <- function(code) {   
    xref <- lapply(code, function(x) 
                   if (class(x)=="nwcode") unique(x$xref) else NULL)

    nwchase <- function(chain) {
        xtemp <- xref[[chain[1]]]  #routines called by the head of the chain
        if (length(xtemp) ==0) return(NULL)
        
        for (i in 1:length(xtemp)) {
            if (!is.na(match(xtemp[i], chain))) return(c(rev(chain), xtemp[i]))
            temp <- nwchase(c(xtemp[i], chain))
            if (!is.null(temp)) return(temp)
            }
        NULL
        }
    

    cnames <- names(code)
    temp <- lapply(cnames[cnames!=""], nwchase)
    templen <- sapply(temp,length)
    if (any(templen) > 0) 
        temp[[min(which(templen==min(templen[templen>0])))]]
    else NULL
    }
@ 


The extra at sign rule:  if we see the characters @<< and those
characters are not inside a [[[[]]]] pair, then remove the @ sign.
If someone were to split square brackets across lines they can 
fool this function.
<<nwkillamp>>=
nwkillat <- function(program) {
    suspectlines <- which(grepl("@<<[~>]>>", program))

    # This is slower than Hades, but I expect to see only 0-3
    #   lines in the suspectlines set
    for (i in suspectlines) {
        line <- strsplit(program[i], split='')
        nl <- length(line)
        state <- 0  # 0=ordirnay text, 1=inside a [[
        cstate <- integer(nl)  # 1= an ampersand to be removed
        for (j in 1:nl) {
            if (state==0) {
                if ((i+1 <nl) && line[i]=='@' && line[i+1]=='<' && 
                    line[i+2]=='<') cstate[i]=1
                if (i<nl && line[i]=='[' && line[i+1]=='[') state <-1
                }
            else {
                if (i<nl && line[i]==']' && line[i+1]==']') state<-0
                }
            }
        if (any(cstate)) program[i] <- paste(line[cstate==0], collapse='')
        }
    program
    }
@

\section{Notangle}
The primary reason for writing noweb in R is the notangle function, which
extracts and writes out a named R file from the noweb source.
This allows the [[coxme]] package to be built on machines that do not have the
standalone noweb package installed.
The primary work is the recursion that occurs when one code fragment
references another, and maintaining the relative indentation of the point
at which it is called.

If no target is given, the default is to extract the target named `*' %'`
if it exists, in keeping with the standalone noweb code.  If there is no
such target I extract the first code chunk.

<<notangle>>=
notangle <- function(noweb, target='*', file.) {
    cname <- names(noweb)
    indx <- match(target, cname)
    if (is.na(indx)) {
        if (missing(target) && any(cname != '')) 
            target <- (cname[cname!=''])[1]
        else stop(paste("Code chunk", target, "not found in source file"))
        }
    program <- nwextract(noweb, target, prefix="")
    class(program) <-"notangle"
    program
    }

print.notangle <- function(x, file., ...) {
    if (missing(file.)) cat(x, sep='\n')
    else cat(x, sep='\n', file=file.)
    invisible(x)
    }
@ 

Here is the actual workhorse function.
It extracts a named code chunk, recursively inserting other
named ones when they are referenced. 
If there are inclusions the data is first broken up into a 
list: element 1 is the start to the first inclusion, element 2 contains
the result of a call to nwextract on the first inclusion, element 3
from first inclusion to second inclusion, etc.  Some of the odd
elements may be empty, for instance if two inclusion lines abut.
The ifelse near the end preserves blank lines, no indentation
prefix is added to them.  It is there mostly to make out output
exactly match that of the original notangle program.

Note that there can be multiple code chunks with the same name:
it is standard in noweb to display a chunk bit by bit as we
comment on its structure.  Hence the first line below can't be
[[code[target]]] as that would fetch only the first piece.
The for loop replaces each chunk with it's expansion one by one;
at the end we unlist the result.

<<notangle>>=
nwextract<- function(code, target, prefix="") {
    mycode <- code[names(code)==target]
    if (is.null(mycode)) stop("Program logic flaw 1")
    
    for (chunk in 1:length(mycode)) {
        ctemp <- mycode[[chunk]]
        if (length(ctemp$xref) ==0) temp <- ctemp$lines
        else {
            inclusions <- length(ctemp$xref)
            temp <- vector("list", 2*inclusions +1)
            for (i in 1:length(ctemp$xref))
                temp[[2*i]] <- nwextract(code, ctemp$xref[i], ctemp$indent[i])
            start <- c(1, ctemp$xindex+1) #start and end of non-inclusions
            end   <- c(ctemp$xindex-1, length(ctemp$lines))
            for (i in 1:length(start)) 
                if (start[i]<=end[i]) 
                    temp[[2*i -1]] <- ctemp$lines[start[i]:end[i]]
            temp <- unlist(temp)
            }
        mycode[[chunk]] <- ifelse(temp=="", "", paste(prefix, temp, sep=''))
        }
    as.vector(unlist(mycode))   #kill any names added to the vector
    }
@ 

Convert tabs to blanks. If a tab occurs at position 1 then 8 blanks get added,
if at position 2 then 7 blanks get added, etc. If there are two tabs in a
row, then the second one is at postion 9, not 2 -- you have to do them
sequentially.  The key is to restart your count at 1 after each tab.
The blanks variable contains various size inserts.
<<tab.to.blank>>=
tab.to.blank <- function(x, tabstop=8) {
    blanks <- rep(" ", tabstop)
    for (i in (tabstop-1):1) blanks[i] <- paste(blanks[i +0:1], collapse='')

    temp <- strsplit(x, '')
    linefix <- function(x) {
        n <- length(x)
        if (n==0) ""
        else {
            since.last.tab <- 1:n - cummax(ifelse(x=='\t', 1:n, 0))
            newx <- ifelse(x=='\t', blanks[1+ since.last.tab%%tabstop], x)
            paste(newx, collapse='')
            }
        }
    unlist(lapply(temp, linefix))
    }
@ 


\section{Noweave}
The noweave processor is more challenging, largley because of the need
to add indexing.  Like noweb, we take care to make the result of noweave
have exactly the same number of lines as the input source code, so that
Latex error messages give correct line numbers.
<<noweave>>=
@ 
\end{document}
